// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/db/repository.go

// Package db is a generated GoMock package.
package db

import (
	v1 "Gault/gen/go/api/proto/v1"
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockRepository) BeginTx(arg0 context.Context) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", arg0)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockRepositoryMockRecorder) BeginTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockRepository)(nil).BeginTx), arg0)
}

// CheckSessionUser mocks base method.
func (m *MockRepository) CheckSessionUser(arg0 context.Context, arg1, arg2 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSessionUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckSessionUser indicates an expected call of CheckSessionUser.
func (mr *MockRepositoryMockRecorder) CheckSessionUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSessionUser", reflect.TypeOf((*MockRepository)(nil).CheckSessionUser), arg0, arg1, arg2)
}

// CloseLO mocks base method.
func (m *MockRepository) CloseLO(ctx context.Context, tx *sql.Tx, fd int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseLO", ctx, tx, fd)
}

// CloseLO indicates an expected call of CloseLO.
func (mr *MockRepositoryMockRecorder) CloseLO(ctx, tx, fd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseLO", reflect.TypeOf((*MockRepository)(nil).CloseLO), ctx, tx, fd)
}

// CreateEmptyLO mocks base method.
func (m *MockRepository) CreateEmptyLO(arg0 context.Context, arg1 *sql.Tx) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmptyLO", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmptyLO indicates an expected call of CreateEmptyLO.
func (mr *MockRepositoryMockRecorder) CreateEmptyLO(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmptyLO", reflect.TypeOf((*MockRepository)(nil).CreateEmptyLO), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(arg0 context.Context, arg1, arg2 string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), arg0, arg1, arg2)
}

// DeleteData mocks base method.
func (m *MockRepository) DeleteData(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteData", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteData indicates an expected call of DeleteData.
func (mr *MockRepositoryMockRecorder) DeleteData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteData", reflect.TypeOf((*MockRepository)(nil).DeleteData), arg0, arg1)
}

// GetData mocks base method.
func (m *MockRepository) GetData(arg0 context.Context, arg1 string) (*v1.GetDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetData indicates an expected call of GetData.
func (mr *MockRepositoryMockRecorder) GetData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockRepository)(nil).GetData), arg0, arg1)
}

// GetDataNameList mocks base method.
func (m *MockRepository) GetDataNameList(arg0 context.Context, arg1 string) (*v1.GetUserDataListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataNameList", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetUserDataListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataNameList indicates an expected call of GetDataNameList.
func (mr *MockRepositoryMockRecorder) GetDataNameList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataNameList", reflect.TypeOf((*MockRepository)(nil).GetDataNameList), arg0, arg1)
}

// GetOidByItemID mocks base method.
func (m *MockRepository) GetOidByItemID(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOidByItemID", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOidByItemID indicates an expected call of GetOidByItemID.
func (mr *MockRepositoryMockRecorder) GetOidByItemID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOidByItemID", reflect.TypeOf((*MockRepository)(nil).GetOidByItemID), arg0, arg1)
}

// InsertUserDataRecordTx mocks base method.
func (m *MockRepository) InsertUserDataRecordTx(arg0 context.Context, arg1 *sql.Tx, arg2, arg3, arg4, arg5 string, arg6 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUserDataRecordTx", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUserDataRecordTx indicates an expected call of InsertUserDataRecordTx.
func (mr *MockRepositoryMockRecorder) InsertUserDataRecordTx(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserDataRecordTx", reflect.TypeOf((*MockRepository)(nil).InsertUserDataRecordTx), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// IsUserCreated mocks base method.
func (m *MockRepository) IsUserCreated(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserCreated", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserCreated indicates an expected call of IsUserCreated.
func (mr *MockRepositoryMockRecorder) IsUserCreated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserCreated", reflect.TypeOf((*MockRepository)(nil).IsUserCreated), arg0, arg1)
}

// OpenLOForWriting mocks base method.
func (m *MockRepository) OpenLOForWriting(ctx context.Context, tx *sql.Tx, oid int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenLOForWriting", ctx, tx, oid)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenLOForWriting indicates an expected call of OpenLOForWriting.
func (mr *MockRepositoryMockRecorder) OpenLOForWriting(ctx, tx, oid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenLOForWriting", reflect.TypeOf((*MockRepository)(nil).OpenLOForWriting), ctx, tx, oid)
}

// TruncateLO mocks base method.
func (m *MockRepository) TruncateLO(arg0 context.Context, arg1 *sql.Tx, arg2 int, arg3 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TruncateLO", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// TruncateLO indicates an expected call of TruncateLO.
func (mr *MockRepositoryMockRecorder) TruncateLO(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TruncateLO", reflect.TypeOf((*MockRepository)(nil).TruncateLO), arg0, arg1, arg2, arg3)
}

// UpdateSessionUser mocks base method.
func (m *MockRepository) UpdateSessionUser(arg0 context.Context, arg1, arg2 string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSessionUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateSessionUser indicates an expected call of UpdateSessionUser.
func (mr *MockRepositoryMockRecorder) UpdateSessionUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSessionUser", reflect.TypeOf((*MockRepository)(nil).UpdateSessionUser), arg0, arg1, arg2)
}

// WriteLO mocks base method.
func (m *MockRepository) WriteLO(ctx context.Context, tx *sql.Tx, fd int, chunk []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteLO", ctx, tx, fd, chunk)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteLO indicates an expected call of WriteLO.
func (mr *MockRepositoryMockRecorder) WriteLO(ctx, tx, fd, chunk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLO", reflect.TypeOf((*MockRepository)(nil).WriteLO), ctx, tx, fd, chunk)
}
