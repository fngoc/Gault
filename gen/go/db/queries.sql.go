// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const checkSessionUser = `-- name: CheckSessionUser :one
SELECT EXISTS (SELECT 1
               FROM user_sessions
               WHERE user_id = $1
                 AND session_token = $2)
`

type CheckSessionUserParams struct {
	UserID       uuid.NullUUID
	SessionToken string
}

func (q *Queries) CheckSessionUser(ctx context.Context, arg CheckSessionUserParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkSessionUser, arg.UserID, arg.SessionToken)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, password_hash)
VALUES ($1, $2) RETURNING id
`

type CreateUserParams struct {
	Username     string
	PasswordHash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.PasswordHash)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteUserData = `-- name: DeleteUserData :exec
DELETE
FROM user_data
WHERE id = $1
`

func (q *Queries) DeleteUserData(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserData, id)
	return err
}

const getDataInfoByID = `-- name: GetDataInfoByID :one
SELECT data_type, data_name, largeobject_oid
FROM user_data
WHERE id = $1
`

type GetDataInfoByIDRow struct {
	DataType       string
	DataName       string
	LargeobjectOid uint32
}

func (q *Queries) GetDataInfoByID(ctx context.Context, id uuid.UUID) (GetDataInfoByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getDataInfoByID, id)
	var i GetDataInfoByIDRow
	err := row.Scan(&i.DataType, &i.DataName, &i.LargeobjectOid)
	return i, err
}

const getOidByID = `-- name: GetOidByID :one
SELECT largeobject_oid
FROM user_data
WHERE id = $1
`

func (q *Queries) GetOidByID(ctx context.Context, id uuid.UUID) (uint32, error) {
	row := q.db.QueryRowContext(ctx, getOidByID, id)
	var largeobject_oid uint32
	err := row.Scan(&largeobject_oid)
	return largeobject_oid, err
}

const getUserCredentialsByUsername = `-- name: GetUserCredentialsByUsername :one
SELECT id, password_hash
FROM users
WHERE username = $1
`

type GetUserCredentialsByUsernameRow struct {
	ID           uuid.UUID
	PasswordHash string
}

func (q *Queries) GetUserCredentialsByUsername(ctx context.Context, username string) (GetUserCredentialsByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, getUserCredentialsByUsername, username)
	var i GetUserCredentialsByUsernameRow
	err := row.Scan(&i.ID, &i.PasswordHash)
	return i, err
}

const insertUserDataWithOid = `-- name: InsertUserDataWithOid :exec
INSERT INTO user_data (id, user_id, data_type, data_name, largeobject_oid)
VALUES ($1, $2, $3, $4, $5)
`

type InsertUserDataWithOidParams struct {
	ID             uuid.UUID
	UserID         uuid.NullUUID
	DataType       string
	DataName       string
	LargeobjectOid uint32
}

func (q *Queries) InsertUserDataWithOid(ctx context.Context, arg InsertUserDataWithOidParams) error {
	_, err := q.db.ExecContext(ctx, insertUserDataWithOid,
		arg.ID,
		arg.UserID,
		arg.DataType,
		arg.DataName,
		arg.LargeobjectOid,
	)
	return err
}

const insertUserSession = `-- name: InsertUserSession :exec
INSERT INTO user_sessions (user_id, session_token, expires_at)
VALUES ($1, $2, NOW() + INTERVAL '20 minutes')
`

type InsertUserSessionParams struct {
	UserID       uuid.NullUUID
	SessionToken string
}

func (q *Queries) InsertUserSession(ctx context.Context, arg InsertUserSessionParams) error {
	_, err := q.db.ExecContext(ctx, insertUserSession, arg.UserID, arg.SessionToken)
	return err
}

const isUserCreated = `-- name: IsUserCreated :one
SELECT EXISTS (SELECT 1
               FROM users
               WHERE username = $1)
`

func (q *Queries) IsUserCreated(ctx context.Context, username string) (bool, error) {
	row := q.db.QueryRowContext(ctx, isUserCreated, username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const listUserData = `-- name: ListUserData :many
SELECT id, data_type, data_name
FROM user_data
WHERE user_id = $1
`

type ListUserDataRow struct {
	ID       uuid.UUID
	DataType string
	DataName string
}

func (q *Queries) ListUserData(ctx context.Context, userID uuid.NullUUID) ([]ListUserDataRow, error) {
	rows, err := q.db.QueryContext(ctx, listUserData, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUserDataRow
	for rows.Next() {
		var i ListUserDataRow
		if err := rows.Scan(&i.ID, &i.DataType, &i.DataName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
