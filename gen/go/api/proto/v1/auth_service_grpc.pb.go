// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/proto/v1/auth_service.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthV1Service_Login_FullMethodName        = "/api.proto.v1.AuthV1Service/Login"
	AuthV1Service_Registration_FullMethodName = "/api.proto.v1.AuthV1Service/Registration"
)

// AuthV1ServiceClient is the client API for AuthV1Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// gRPC-сервис для управления авторизации и регистрации
type AuthV1ServiceClient interface {
	// Login функция обработчик авторизации
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// Registration функция обработчик регистрации
	Registration(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error)
}

type authV1ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthV1ServiceClient(cc grpc.ClientConnInterface) AuthV1ServiceClient {
	return &authV1ServiceClient{cc}
}

func (c *authV1ServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, AuthV1Service_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1ServiceClient) Registration(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegistrationResponse)
	err := c.cc.Invoke(ctx, AuthV1Service_Registration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthV1ServiceServer is the server API for AuthV1Service service.
// All implementations should embed UnimplementedAuthV1ServiceServer
// for forward compatibility.
//
// gRPC-сервис для управления авторизации и регистрации
type AuthV1ServiceServer interface {
	// Login функция обработчик авторизации
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// Registration функция обработчик регистрации
	Registration(context.Context, *RegistrationRequest) (*RegistrationResponse, error)
}

// UnimplementedAuthV1ServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthV1ServiceServer struct{}

func (UnimplementedAuthV1ServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthV1ServiceServer) Registration(context.Context, *RegistrationRequest) (*RegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Registration not implemented")
}
func (UnimplementedAuthV1ServiceServer) testEmbeddedByValue() {}

// UnsafeAuthV1ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthV1ServiceServer will
// result in compilation errors.
type UnsafeAuthV1ServiceServer interface {
	mustEmbedUnimplementedAuthV1ServiceServer()
}

func RegisterAuthV1ServiceServer(s grpc.ServiceRegistrar, srv AuthV1ServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthV1ServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthV1Service_ServiceDesc, srv)
}

func _AuthV1Service_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1ServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthV1Service_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1ServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1Service_Registration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1ServiceServer).Registration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthV1Service_Registration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1ServiceServer).Registration(ctx, req.(*RegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthV1Service_ServiceDesc is the grpc.ServiceDesc for AuthV1Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthV1Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.proto.v1.AuthV1Service",
	HandlerType: (*AuthV1ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AuthV1Service_Login_Handler,
		},
		{
			MethodName: "Registration",
			Handler:    _AuthV1Service_Registration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/v1/auth_service.proto",
}
