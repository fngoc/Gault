// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/proto/v1/data_service.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ContentManagerV1Service_GetUserDataList_FullMethodName = "/api.proto.v1.ContentManagerV1Service/GetUserDataList"
	ContentManagerV1Service_GetData_FullMethodName         = "/api.proto.v1.ContentManagerV1Service/GetData"
	ContentManagerV1Service_SaveData_FullMethodName        = "/api.proto.v1.ContentManagerV1Service/SaveData"
	ContentManagerV1Service_DeleteData_FullMethodName      = "/api.proto.v1.ContentManagerV1Service/DeleteData"
	ContentManagerV1Service_UpdateData_FullMethodName      = "/api.proto.v1.ContentManagerV1Service/UpdateData"
)

// ContentManagerV1ServiceClient is the client API for ContentManagerV1Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// gRPC-сервис для управления доступа к данным
type ContentManagerV1ServiceClient interface {
	// GetUserDataList функция обработчик получения листа информации о данных
	GetUserDataList(ctx context.Context, in *GetUserDataListRequest, opts ...grpc.CallOption) (*GetUserDataListResponse, error)
	// GetData функция обработчик получения данных
	GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error)
	// SaveData функция обработчик сохранения данных
	SaveData(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SaveDataRequest, SaveDataResponse], error)
	// DeleteData функция обработчик удаления данных
	DeleteData(ctx context.Context, in *DeleteDataRequest, opts ...grpc.CallOption) (*DeleteDataResponse, error)
	// UpdateData функция обновления данных
	UpdateData(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UpdateDataRequest, UpdateDataResponse], error)
}

type contentManagerV1ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContentManagerV1ServiceClient(cc grpc.ClientConnInterface) ContentManagerV1ServiceClient {
	return &contentManagerV1ServiceClient{cc}
}

func (c *contentManagerV1ServiceClient) GetUserDataList(ctx context.Context, in *GetUserDataListRequest, opts ...grpc.CallOption) (*GetUserDataListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserDataListResponse)
	err := c.cc.Invoke(ctx, ContentManagerV1Service_GetUserDataList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerV1ServiceClient) GetData(ctx context.Context, in *GetDataRequest, opts ...grpc.CallOption) (*GetDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDataResponse)
	err := c.cc.Invoke(ctx, ContentManagerV1Service_GetData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerV1ServiceClient) SaveData(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SaveDataRequest, SaveDataResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ContentManagerV1Service_ServiceDesc.Streams[0], ContentManagerV1Service_SaveData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SaveDataRequest, SaveDataResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContentManagerV1Service_SaveDataClient = grpc.ClientStreamingClient[SaveDataRequest, SaveDataResponse]

func (c *contentManagerV1ServiceClient) DeleteData(ctx context.Context, in *DeleteDataRequest, opts ...grpc.CallOption) (*DeleteDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDataResponse)
	err := c.cc.Invoke(ctx, ContentManagerV1Service_DeleteData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentManagerV1ServiceClient) UpdateData(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UpdateDataRequest, UpdateDataResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ContentManagerV1Service_ServiceDesc.Streams[1], ContentManagerV1Service_UpdateData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UpdateDataRequest, UpdateDataResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContentManagerV1Service_UpdateDataClient = grpc.ClientStreamingClient[UpdateDataRequest, UpdateDataResponse]

// ContentManagerV1ServiceServer is the server API for ContentManagerV1Service service.
// All implementations should embed UnimplementedContentManagerV1ServiceServer
// for forward compatibility.
//
// gRPC-сервис для управления доступа к данным
type ContentManagerV1ServiceServer interface {
	// GetUserDataList функция обработчик получения листа информации о данных
	GetUserDataList(context.Context, *GetUserDataListRequest) (*GetUserDataListResponse, error)
	// GetData функция обработчик получения данных
	GetData(context.Context, *GetDataRequest) (*GetDataResponse, error)
	// SaveData функция обработчик сохранения данных
	SaveData(grpc.ClientStreamingServer[SaveDataRequest, SaveDataResponse]) error
	// DeleteData функция обработчик удаления данных
	DeleteData(context.Context, *DeleteDataRequest) (*DeleteDataResponse, error)
	// UpdateData функция обновления данных
	UpdateData(grpc.ClientStreamingServer[UpdateDataRequest, UpdateDataResponse]) error
}

// UnimplementedContentManagerV1ServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedContentManagerV1ServiceServer struct{}

func (UnimplementedContentManagerV1ServiceServer) GetUserDataList(context.Context, *GetUserDataListRequest) (*GetUserDataListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDataList not implemented")
}
func (UnimplementedContentManagerV1ServiceServer) GetData(context.Context, *GetDataRequest) (*GetDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedContentManagerV1ServiceServer) SaveData(grpc.ClientStreamingServer[SaveDataRequest, SaveDataResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SaveData not implemented")
}
func (UnimplementedContentManagerV1ServiceServer) DeleteData(context.Context, *DeleteDataRequest) (*DeleteDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteData not implemented")
}
func (UnimplementedContentManagerV1ServiceServer) UpdateData(grpc.ClientStreamingServer[UpdateDataRequest, UpdateDataResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UpdateData not implemented")
}
func (UnimplementedContentManagerV1ServiceServer) testEmbeddedByValue() {}

// UnsafeContentManagerV1ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentManagerV1ServiceServer will
// result in compilation errors.
type UnsafeContentManagerV1ServiceServer interface {
	mustEmbedUnimplementedContentManagerV1ServiceServer()
}

func RegisterContentManagerV1ServiceServer(s grpc.ServiceRegistrar, srv ContentManagerV1ServiceServer) {
	// If the following call pancis, it indicates UnimplementedContentManagerV1ServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ContentManagerV1Service_ServiceDesc, srv)
}

func _ContentManagerV1Service_GetUserDataList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDataListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerV1ServiceServer).GetUserDataList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerV1Service_GetUserDataList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerV1ServiceServer).GetUserDataList(ctx, req.(*GetUserDataListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerV1Service_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerV1ServiceServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerV1Service_GetData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerV1ServiceServer).GetData(ctx, req.(*GetDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerV1Service_SaveData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContentManagerV1ServiceServer).SaveData(&grpc.GenericServerStream[SaveDataRequest, SaveDataResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContentManagerV1Service_SaveDataServer = grpc.ClientStreamingServer[SaveDataRequest, SaveDataResponse]

func _ContentManagerV1Service_DeleteData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentManagerV1ServiceServer).DeleteData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentManagerV1Service_DeleteData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentManagerV1ServiceServer).DeleteData(ctx, req.(*DeleteDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentManagerV1Service_UpdateData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContentManagerV1ServiceServer).UpdateData(&grpc.GenericServerStream[UpdateDataRequest, UpdateDataResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContentManagerV1Service_UpdateDataServer = grpc.ClientStreamingServer[UpdateDataRequest, UpdateDataResponse]

// ContentManagerV1Service_ServiceDesc is the grpc.ServiceDesc for ContentManagerV1Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentManagerV1Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.proto.v1.ContentManagerV1Service",
	HandlerType: (*ContentManagerV1ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserDataList",
			Handler:    _ContentManagerV1Service_GetUserDataList_Handler,
		},
		{
			MethodName: "GetData",
			Handler:    _ContentManagerV1Service_GetData_Handler,
		},
		{
			MethodName: "DeleteData",
			Handler:    _ContentManagerV1Service_DeleteData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SaveData",
			Handler:       _ContentManagerV1Service_SaveData_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UpdateData",
			Handler:       _ContentManagerV1Service_UpdateData_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/proto/v1/data_service.proto",
}
